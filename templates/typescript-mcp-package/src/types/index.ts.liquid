/**
 * Shared TypeScript Types
 *
 * DESIGN PATTERNS:
 * - Type-first development
 * - Interface segregation
 *
 * CODING STANDARDS:
 * - Export all shared types from this file
 * - Use descriptive names for types and interfaces
 */

import type { CallToolResult } from '@modelcontextprotocol/sdk/types.js';

/**
 * Tool definition for MCP
 */
export interface ToolDefinition {
  name: string;
  description: string;
  inputSchema: {
    type: string;
    properties: Record<string, any>;
    required?: string[];
    additionalProperties?: boolean;
  };
}

/**
 * Base tool interface following MCP SDK patterns
 */
export interface Tool<TInput = any> {
  getDefinition(): ToolDefinition;
  execute(input: TInput): Promise<CallToolResult>;
}
{% if withHttpTransport %}
/**
 * Transport mode types
 */
export enum TransportMode {
  STDIO = 'stdio',
  HTTP = 'http',
  SSE = 'sse',
}

/**
 * Transport configuration options
 */
export interface TransportConfig {
  mode: TransportMode;
  port?: number;
  host?: string;
}

/**
 * Base interface for all transport handlers
 */
export interface TransportHandler {
  start(): Promise<void>;
  stop(): Promise<void>;
}

/**
 * HTTP transport specific types
 */
export interface HttpTransportHandler extends TransportHandler {
  getPort(): number;
  getHost(): string;
}
{% endif %}