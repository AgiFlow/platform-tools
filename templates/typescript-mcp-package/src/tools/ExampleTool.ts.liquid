/**
 * {{ toolName }}
 *
 * DESIGN PATTERNS:
 * - Tool pattern with getDefinition() and execute() methods
 * - Service delegation for business logic
 * - JSON Schema validation for inputs
 *
 * CODING STANDARDS:
 * - Implement Tool interface from ../types
 * - Use TOOL_NAME constant with snake_case (e.g., 'file_read')
 * - Return CallToolResult with content array
 * - Handle errors with isError flag
 * - Delegate complex logic to services
 *
 * AVOID:
 * - Complex business logic in execute method
 * - Unhandled promise rejections
 * - Missing input validation
 */

import type { CallToolResult } from '@modelcontextprotocol/sdk/types.js';
import type { Tool, ToolDefinition } from '../types/index';{% if serviceName %}
import { {{ serviceName }} } from '../services/{{ serviceName }}';{% endif %}

interface {{ toolName }}Input {
  input: string;
}

export class {{ toolName }} implements Tool<{{ toolName }}Input> {
  static readonly TOOL_NAME = '{{ toolName | replace: "Tool", "" | snakeCase }}';
{% if serviceName %}
  private service = new {{ serviceName }}();
{% endif %}
  getDefinition(): ToolDefinition {
    return {
      name: {{ toolName }}.TOOL_NAME,
      description: '{{ toolDescription }}',
      inputSchema: {
        type: 'object',
        properties: {
          input: {
            type: 'string',
            description: 'Input data',
          },
        },
        required: ['input'],
        additionalProperties: false,
      },
    };
  }

  async execute(input: {{ toolName }}Input): Promise<CallToolResult> {
    try {
      {% if serviceName %}const result = await this.service.processData(input.input);{% else %}// TODO: Implement tool logic
      const result = input.input;{% endif %}

      return {
        content: [
          {
            type: 'text',
            text: result,
          },
        ],
      };
    } catch (error) {
      return {
        content: [
          {
            type: 'text',
            text: `Error: ${error instanceof Error ? error.message : 'Unknown error'}`,
          },
        ],
        isError: true,
      };
    }
  }
}
